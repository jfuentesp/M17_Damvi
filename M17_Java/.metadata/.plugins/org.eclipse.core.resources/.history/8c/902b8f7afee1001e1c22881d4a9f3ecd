package Motor;

public class GameLoop 
{

	public static GameLoop Instance = null;
	private int m_FixedFrames = 60;
	private int m_FramesPerSecond = 1000 / m_FixedFrames;
	private boolean m_endOfExecution;
	
	public void init()
	{
		StartExecution();
		update();
	}
	
	//Function where we check the inputs made by the user 
	@SuppressWarnings("unused")
	private void input()
	{
		//Input won't be needed since we are not going to register any player input during the loop.
	}
	
	//Function where we execute the different actions of the game elements, keeping the timelapse since the last update (deltaTime)
		//Deltatime is an increment, meaning the difference of time between an update and the previous one. 
		/*
		 * There are different ways to handle the deltaTime matter. 
		 * 	- Passing it as update() parameter so every gameobject can have it as reference.
		 *  - Making is as a static class Time (like unity has Time.deltaTime class and as a public variable)
		 *  - Having it set as a read only variable in this own class GameLoop, having a getter to access it whenever a class need it. 
		 */
	private void update()
	{
		float lastTime = System.nanoTime();
		while(!m_endOfExecution)
		{
			float currentTime = System.nanoTime();
			float deltaTime = currentTime - lastTime;
			//Here we would set pre update methods, like the player Inputs
			update();
			//Here we would set post update methods, like rendering the graphics, late updates, etc
			lastTime = currentTime;
			System.out.println("Current time: " + currentTime + " \n Delta time: + " + deltaTime + " \n --------------------------------------");
		}
	}
	
	//Function where we show on screen how the different elements of the game behave
	public void render()
	{
		//Render won't be needed since we are not going to show graphics on screen, just prompts.
	}
	
	public static GameLoop getInstance()
	{
		if(Instance == null)
			Instance = new GameLoop();
		return Instance;
	}
	
	private void StopExecution()
	{
		m_endOfExecution = true;
	}
	
	private void StartExecution()
	{
		m_endOfExecution = false;
	}

	public int getFixedFrames() {
		return m_FixedFrames;
	}

	public int getFramesPerSecond() {
		return m_FramesPerSecond;
	}
		
}
